

<div class="container">
    <h3>Chat GPT</h3>

    <div class="">
        <form class="search-bar">
            <input type="text" placeholder="Ask a question" id="user-input" />
            <button type="button" id="submit-button">Submit</button>
        </form>
    </div>
    <div class="chat-container" id="chat-container">
        <!-- ChatGPT conversation display -->
    </div>

</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Get elements
    const userInput = document.getElementById("user-input");
    const submitButton = document.getElementById("submit-button");
    const chatContainer = document.getElementById("chat-container");

    // OpenAI API key (replace 'YOUR_API_KEY' with your actual API key)
    const apiKey = "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";

    // Create conversation history
    let conversation = [];

    // Event listener for submit button
    submitButton.addEventListener("click", () => {
        const userMessage = userInput.value.trim();
        if (userMessage !== "") {
            // Display user message in the chat container
            conversation.push({ role: "user", content: userMessage });
            renderChat();

            // Send user message to ChatGPT
            fetch("https://api.openai.com/v1/chat/completions", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${apiKey}`,
                },
                body: JSON.stringify({
                    model: "gpt-3.5-turbo",
                    messages: conversation,
                }),
            })
                .then((response) => response.json())
                .then((data) => {
                    // Get and display ChatGPT's reply
                    const reply = data.choices[0].message.content;
                    conversation.push({ role: "assistant", content: reply });
                    renderChat();
                })
                .catch((error) => console.error("Error:", error));

            // Clear user input field
            userInput.value = "";
        }
    });

    // Render conversation in the chat container
    function renderChat() {
        chatContainer.innerHTML = "";
        conversation.forEach((message) => {
            const messageElement = document.createElement("div");
            messageElement.classList.add("message", message.role);
            messageElement.innerText = message.content;
            chatContainer.appendChild(messageElement);
        });
    }
</script>


<style>
    /* Your existing styles */

    .chat-container {
        margin-top: 20px;
        max-width: 300px;
        background-color: white;
        border-radius: 10px;
        padding: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .message {
        margin-bottom: 10px;
        padding: 8px;
        border-radius: 6px;
    }

    .user {
        background-color: #f1f1f1;
        text-align: right;
    }

    .assistant {
        background-color: #e1e1e1;
    }
</style>